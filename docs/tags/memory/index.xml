<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>memory on Hello World</title>
    <link>https://blog.terrywh.net/tags/memory/</link>
    <description>Recent content in memory on Hello World</description>
    <generator>Hugo -- gohugo.io</generator>
    <managingEditor>terry.wuhao[at]gmail.com (TerryWu)</managingEditor>
    <webMaster>terry.wuhao[at]gmail.com (TerryWu)</webMaster>
    <copyright>@copyright 2017</copyright>
    <lastBuildDate>Tue, 23 Feb 2016 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://blog.terrywh.net/tags/memory/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Linux 下 GLIBC 内存回收的疑问</title>
      <link>https://blog.terrywh.net/post/2016/glibc-memory-freeing/</link>
      <pubDate>Tue, 23 Feb 2016 00:00:00 +0000</pubDate>
      <author>terry.wuhao[at]gmail.com (TerryWu)</author>
      <guid>https://blog.terrywh.net/post/2016/glibc-memory-freeing/</guid>
      <description>记得好早之前刚刚接触 Linux 下 C/C++ 开发的时候就有个疑问：在程序内 free 掉的空间没有立刻交换给操作系统，程序进程的内存没有减少。后来一度在开发各种长连接程序时 GOOGLE 各种资料，最近又偶尔遇到，借此机会把相关的说法整理如下。
其中两个重点内容如下：
 Freeing Memory Allocated with malloc：   Occasionally, free can actually return memory to the operating system and make the process smaller. Usually, all it can do is allow a later call to malloc to reuse the space. In the meantime, the space remains in your program as part of a free-list used internally by malloc.
 注意这里的 “**Occasionally**” 用词；   Linux Programmer&amp;rsquo;s Manual - mallopt：   M_TRIM_THRESHOLD</description>
    </item>
    
  </channel>
</rss>